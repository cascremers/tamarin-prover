theory SignedDH_eCK begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true()

section{* The Signed Diffie-Hellman Protocol in the eCK model *}

rule (modulo E) Register_pk:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_1:
   [ Fr( ~ekI ), !Ltk( $I, ltkI ) ]
  --[ SidI_1( ~ekI, $I, $R, 'g'^~ekI ) ]->
   [
   Init_1( ~ekI, $I, $R, ~ekI, 'g'^~ekI ), !Ephk( ~ekI ),
   Out( <$I, $R, 'g'^~ekI, sign(<'1', $I, $R, 'g'^~ekI>, ltkI)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_2:
   [
   Init_1( ~ekI, $I, $R, ~ekI, hkI ), !Pk( $R, pk(ltkR) ),
   In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
   ]
  --[ SidI_2( ~ekI, $I, $R, hkI, Y, Y^~ekI ) ]->
   [ !Sessk( ~ekI, Y^~ekI ) ]

  /*
  rule (modulo AC) Init_2:
     [
     Init_1( ~ekI, $I, $R, ~ekI, hkI ), !Pk( $R, pk(ltkR) ),
     In( <$R, $I, Y, sign(<'2', $R, $I, Y>, ltkR)> )
     ]
    --[ SidI_2( ~ekI, $I, $R, hkI, Y, z ) ]->
     [ !Sessk( ~ekI, z ) ]
    variants (modulo AC)
    1. ~ekI  = ~ekI.10
       Y     = Y.11
       z     = Y.11^~ekI.10
    
    2. ~ekI  = ~ekI.11
       Y     = z.16^inv(~ekI.11)
       z     = z.16
    
    3. ~ekI  = ~ekI.12
       Y     = x.18^x.19
       z     = x.18^(~ekI.12*x.19)
    
    4. ~ekI  = ~ekI.12
       Y     = x.18^inv((~ekI.12*x.19))
       z     = x.18^inv(x.19)
    
    5. ~ekI  = ~ekI.12
       Y     = x.18^(x.19*inv(~ekI.12))
       z     = x.18^x.19
    
    6. ~ekI  = ~ekI.13
       Y     = x.19^(x.21*inv((~ekI.13*x.20)))
       z     = x.19^(x.21*inv(x.20))
  */

rule (modulo E) Resp:
   [
   !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
   In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
   ]
  --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, X^~ekR ) ]->
   [
   !Ephk( ~ekR ), !Sessk( ~ekR, X^~ekR ),
   Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> )
   ]

  /*
  rule (modulo AC) Resp:
     [
     !Pk( $I, pk(ltkI) ), !Ltk( $R, ltkR ), Fr( ~ekR ),
     In( <$I, $R, X, sign(<'1', $I, $R, X>, ltkI)> )
     ]
    --[ SidR_1( ~ekR, $I, $R, X, 'g'^~ekR, z ) ]->
     [
     !Ephk( ~ekR ), !Sessk( ~ekR, z ),
     Out( <$R, $I, 'g'^~ekR, sign(<'2', $R, $I, 'g'^~ekR>, ltkR)> )
     ]
    variants (modulo AC)
    1. ~ekR  = ~ekR.11
       X     = X.12
       z     = X.12^~ekR.11
    
    2. ~ekR  = ~ekR.15
       X     = z.20^inv(~ekR.15)
       z     = z.20
    
    3. ~ekR  = ~ekR.62
       X     = x.119^x.120
       z     = x.119^(~ekR.62*x.120)
    
    4. ~ekR  = ~ekR.62
       X     = x.119^inv((~ekR.62*x.120))
       z     = x.119^inv(x.120)
    
    5. ~ekR  = ~ekR.62
       X     = x.119^(x.120*inv(~ekR.62))
       z     = x.119^x.120
    
    6. ~ekR  = ~ekR.63
       X     = x.120^(x.122*inv((~ekR.63*x.121)))
       z     = x.120^(x.122*inv(x.121))
  */

rule (modulo E) Sessk_reveal:
   [ !Sessk( ~tid, k ) ] --[ SesskRev( ~tid ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ltk_reveal:
   [ !Ltk( $A, lkA ) ] --[ LtkRev( $A ) ]-> [ Out( lkA ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Ephk_reveal:
   [ !Ephk( ~ekA ) ] --[ EphkRev( ~ekA ) ]-> [ Out( ~ekA ) ]

  /* has exactly the trivial AC variant */

lemma eCK_initiator_key:
  all-traces
  "¬(∃ #i1 #i2 ttest I R k hkI hkR.
      ((((((SidI_2( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
          (¬(∃ #i3 #i4. (LtkRev( I ) @ #i3) ∧ (EphkRev( ttest ) @ #i4)))) ∧
         (¬(∃ #i3. SesskRev( ttest ) @ #i3))) ∧
        (¬(∃ #i3 #i4 tpartner kpartner.
            (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
            (SesskRev( tpartner ) @ #i4)))) ∧
       (¬(∃ #i3 #i4 #i5 tpartner kpartner.
           ((SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
            (LtkRev( R ) @ #i4)) ∧
           (EphkRev( tpartner ) @ #i5)))) ∧
      (∀ #i3.
        (LtkRev( R ) @ #i3) ⇒
        (∃ #i4 tpartner kpartner.
          SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 ttest I R k hkI hkR.
  (SidI_2( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i3 #i4. (LtkRev( I ) @ #i3) ∧ (EphkRev( ttest ) @ #i4) ⇒ ⊥) ∧
  (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4 tpartner kpartner.
    (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
    (SesskRev( tpartner ) @ #i4)
   ⇒
    ⊥) ∧
  (∀ #i3 #i4 #i5 tpartner kpartner.
    (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
    (LtkRev( R ) @ #i4) ∧
    (EphkRev( tpartner ) @ #i5)
   ⇒
    ⊥) ∧
  (∀ #i3.
    (LtkRev( R ) @ #i3)
   ⇒
    ∃ #i4 tpartner kpartner.
     (SidR_1( tpartner, I, R, hkI, hkR, kpartner ) @ #i4))"
*/
simplify
solve( Init_1( ~ekI, $I, $R, ~ekI, hkI ) ▶₀ #i1 )
  case Init_1
  solve( !Pk( $R, pk(ltkR) ) ▶₁ #i1 )
    case Register_pk
    solve( !KU( sign(<'2', $R, $I, hkR>, ~ltk) ) @ #vk.6 )
      case Resp
      solve( !KU( 'g'^(~ekI*~ekR) ) @ #vk.9 )
        case Init_1
        solve( !KU( ~ekR ) @ #vk.13 )
          case Ephk_reveal
          solve( !KU( sign(<'1', $I, $R, X>, ~ltk.2) ) @ #vk.13 )
            case Init_1
            solve( !KU( 'g'^~ekR ) @ #vk.11 )
              case Resp
              solve( !KU( 'g'^~ekI.1 ) @ #vk.13 )
                case Init_1
                SOLVED // trace found
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma eCK_responder_key:
  all-traces
  "¬(∃ #i1 #i2 ttest I R k hkI hkR.
      ((((((SidR_1( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)) ∧
          (¬(∃ #i3 #i4. (LtkRev( R ) @ #i3) ∧ (EphkRev( ttest ) @ #i4)))) ∧
         (¬(∃ #i3. SesskRev( ttest ) @ #i3))) ∧
        (¬(∃ #i3 #i4 tpartner kpartner.
            (SidI_2( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
            (SesskRev( tpartner ) @ #i4)))) ∧
       (¬(∃ #i3 #i4 #i5 tpartner.
           ((SidI_1( tpartner, I, R, hkI ) @ #i3) ∧ (LtkRev( I ) @ #i4)) ∧
           (EphkRev( tpartner ) @ #i5)))) ∧
      (∀ #i3.
        (LtkRev( I ) @ #i3) ⇒
        (∃ #i4 tpartner. SidI_1( tpartner, I, R, hkI ) @ #i4)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i1 #i2 ttest I R k hkI hkR.
  (SidR_1( ttest, I, R, hkI, hkR, k ) @ #i1) ∧ (K( k ) @ #i2)
 ∧
  (∀ #i3 #i4. (LtkRev( R ) @ #i3) ∧ (EphkRev( ttest ) @ #i4) ⇒ ⊥) ∧
  (∀ #i3. (SesskRev( ttest ) @ #i3) ⇒ ⊥) ∧
  (∀ #i3 #i4 tpartner kpartner.
    (SidI_2( tpartner, I, R, hkI, hkR, kpartner ) @ #i3) ∧
    (SesskRev( tpartner ) @ #i4)
   ⇒
    ⊥) ∧
  (∀ #i3 #i4 #i5 tpartner.
    (SidI_1( tpartner, I, R, hkI ) @ #i3) ∧
    (LtkRev( I ) @ #i4) ∧
    (EphkRev( tpartner ) @ #i5)
   ⇒
    ⊥) ∧
  (∀ #i3.
    (LtkRev( I ) @ #i3)
   ⇒
    ∃ #i4 tpartner. (SidI_1( tpartner, I, R, hkI ) @ #i4))"
*/
simplify
solve( !Pk( $I, pk(ltkI) ) ▶₀ #i1 )
  case Register_pk
  solve( !Ltk( $R, ltkR ) ▶₁ #i1 )
    case Register_pk
    solve( !KU( sign(<'1', $I, $R, hkI>, ~ltk) ) @ #vk.6 )
      case Init_1
      solve( !KU( 'g'^(~ekI*~ekR) ) @ #vk.7 )
        case Init_1
        solve( !KU( ~ekR ) @ #vk.8 )
          case Ephk_reveal
          solve( !KU( 'g'^~ekI ) @ #vk.8 )
            case Init_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.6. OK.
 checking installation: OK.


analyzing: data/examples/csf12/SignedDH_eCK.spthy

------------------------------------------------------------------------------
analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 10.04939s
  eCK_initiator_key (all-traces): falsified - found trace (10 steps)
  eCK_responder_key (all-traces): falsified - found trace (8 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: data/examples/csf12/SignedDH_eCK.spthy

  output:          case-studies/temp-analysis.spthy
  processing time: 10.04939s
  eCK_initiator_key (all-traces): falsified - found trace (10 steps)
  eCK_responder_key (all-traces): falsified - found trace (8 steps)

==============================================================================
*/
